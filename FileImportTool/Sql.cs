using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace FileImportTool
{
    /*************************
     Created: 07/23/21
     Last Updated: 08/11/21
     Description:This class contains helpful methods to assist in doing SQL functions used by the program. 
    *************************/
    class Sql
    {
        SqlConnection connection; // This is global to allow all methods to have access after the ConnectToSql method is called.
        //SqlCommand command;

        /************************
         Description: Call this to open a connection to a Sql DB. 
         Params: Connection String - this is the format used by SQL to tell it what to connect to.
                e.g., "Data Source=SHUDWSSQL01.sacredheart.edu;Initial Catalog=SHUDW;Integrated Security=SSPI"
         Returns: SqlConnection object.
        ***********************/
        public SqlConnection ConnectToSql(string connectionString)
        {
            

            connection = new SqlConnection(connectionString);
            try
            {
                connection.Open();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }

            return connection;
        }

        /***********************
        Description: Call this to close a connection to a Sql DB. 
        Params: N/A
        Returns: N/A
        ***********************/
        public void CloseConnection() {
            connection.Close();
        }

        /***********************
        Description: Call this to execute a SQL statement.
        Params: Connection - This is the instance of the connection returned by SqlConnection above.
                SQL - SQL code that you want to execute. Can be SELECT, INSERT, UPDATE, etc.
        Returns: N/A
        ***********************/
        //public void ExecSql(string sql)
        //{
        //    command = new SqlCommand(sql, connection);

        //    try
        //    {
        //        command.ExecuteNonQuery();
        //    }catch (Exception ex)
        //    {
        //        Console.WriteLine(ex);
        //    }           
        //}


        /***********************
        Description: This method checks to see if the columns in the file match the columns in the table, only if the table exists.
                     If the table is new, we will create it and this will not be needed.
        Params: tableName - The name of the destination table.
                fileColumns - List of columns from the file. This list is generated by the FilePrep class and passed in.
        Returns: boolean
        ***********************/
        public bool CheckTable(string tableName)
        {
            bool tableExists = false;
            bool hasRows = false;
            
             //reader;

            
            // Query that gets the list of columns in the table that is passed in.
            string sql = "SELECT t.name " +
                         "FROM sys.tables t " +
                         "INNER JOIN sys.schemas s ON s.schema_id = t.schema_id " +
                         $"WHERE s.name + '.' + t.name = '{tableName}' ";

            //prep the command to run the SQL.
            using (SqlCommand cmdCheckTable = new SqlCommand(sql, connection))
            {
                //Try running SQL statement
                try
                {

                    SqlDataReader reader = cmdCheckTable.ExecuteReader();
                    hasRows = reader.HasRows; // bool that is returned by reader. true if the query returns results.
                    reader.Close();

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
               
            // If the SQL command returns results, then the table exists. Flip to true.
            if (hasRows)
            {
                tableExists = true;
            }
            return tableExists;
        }

        /***********************
        Description: This method checks to see if the columns in the file match the columns in the table, only if the table exists.
                     If the table is new, we will create it and this will not be needed.
        Params: tableName - The name of the destination table.
                fileColumns - List of columns from the file. This list is generated by the FilePrep class and passed in.
        Returns: boolean
        ***********************/
        public bool CheckColumns(string tableName, List<string> fileColumns)
        {
            bool isMatching = false;

            // Query that gets the list of columns in the table that is passed in.
            string sql = "SELECT" +
                         "FROM sys.columns c" +
                         "INNER JOIN sys.tables t ON t.object_id = c.object_id" +
                         "INNER JOIN sys.schemas s ON s.schema_id = t.schema_id" +
                         $"WHERE s.name + '.' + t.name = {tableName}";


            //TODO: figure how to get columns into list and compare.
            //prep the command to run the SQL.
            using (SqlCommand cmdCheckCol = new SqlCommand(sql, connection))
            {

                //Try running SQL statement
                try
                {
                    cmdCheckCol.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
            return isMatching;
        }

        /***********************
        Description: This method will truncate the table that is passed into it.
        Params: tableName - The name of the destination table.
        Returns: N/A
        ***********************/
        public void TruncateTable(string tableName)
        {
            string sql = $"TRUNCATE TABLE {tableName}";

            using (SqlCommand cmdTruncateTable = new SqlCommand(sql, connection))
            {

                try
                {
                    cmdTruncateTable.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
        }

        /***********************
          Description: This method will create a table in SQL Server.
          Params: tableName - The name of the destination table.
          Returns: N/A
        ***********************/
        public bool CreateTable(string tableName, List<string> columns)
        {
            string _sql;
            bool _tableExists = false;

            //Build CREATE statement based on the columns of the file.
            _sql = $"CREATE TABLE {tableName} (";

            for(int i = 0; i < columns.Count; i++)
            {
                if (i == 0)//The first column does not need a comma. This is also usually and ID and we want some data to come across.
                    _sql += $"{columns[0]} VARCHAR(255) NOT NULL";
                else
                {
                    _sql += $",{columns[i]} VARCHAR(255) NULL";
                }
            }

            _sql += ")";

            //Create Table
            using (SqlCommand cmdCreateTable = new SqlCommand(_sql, connection))
            {
                try
                {
                    cmdCreateTable.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
            //Check if table exists
            _tableExists = CheckTable(tableName);

            return _tableExists;
        }

        /***********************
        Description: This method will insert rows to the table passed in.
        Params: tableName - The name of the destination table.
        Returns: N/A
        ***********************/
        internal void InsertRows(string tableName, List<string> columns, List<string[]> values)
        {
            string _sql;
            //This is complex. [TODO: Find a way to improve this.]
            // Start the INSERT statement.
            _sql = $"INSERT INTO {tableName}(";

            // Add columns to be inserted into.
            for (int i = 0; i < columns.Count; i++)
            {
                if (i == 0)//The first column does not need a comma. This is also usually and ID and we want some data to come across.
                    _sql += $"{columns[0]}";
                else
                {
                    _sql += $",{columns[i]}";
                }
            }

            // Close the column list.
            _sql += ") VALUES ";

            // Add rows to be inserted.
            for (int i = 0 ; i < values.Count; i++)// each row of data in values.
            {
                if (i == 0)//The first set of values does not need a comma. 
                    _sql += "(";
                else {
                    _sql += ",(";
                }
                for (int j = 0; j < columns.Count; j++) // each field in a row of data.
                {
                    if (j == 0)//The first value does not need a comma.
                        _sql += "'";
                    else
                    {
                        _sql += ",'";
                    }

                    //Adds each field of data for the row.
                    _sql += $"{values[i][j].Replace("'","''")}"; // O'Connor needs to be O''Connor or the SQL code breaks.

                    _sql += "'";
                }

                _sql += ")"; //Close the VALUE row.
            }

            //Insert rows to table.
            using (SqlCommand cmdInsertRows = new SqlCommand(_sql, connection))
            {
                try
                {
                    cmdInsertRows.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }

            //Console.WriteLine(_sql);



        }

    }
}
